#pragma kernel ResetRealtimeFlowMap

#define threads_per_group_x 8
#define threads_per_group_y 8
#define threads_per_group_z 8

#define findID(mapX, mapY, mapZ) (mapX + totalThreadsX * (mapY + totalThreadsY * mapZ))

RWStructuredBuffer<float3> realtimeFlowMapBuffer;
RWStructuredBuffer<float3> realtimeFlowMapBufferPrev;

int numThreadGroupsX;	// total number of thread groups
int numThreadGroupsY;	// total number of thread groups
int numThreadGroupsZ;	// total number of thread groups

float deltaTime;
float diffusionRate;

[numthreads(threads_per_group_x, threads_per_group_y, threads_per_group_z)]
void ResetRealtimeFlowMap(uint3 dispatchID : SV_DispatchThreadID)
{
	// calculate total threads in the each dimension of whole box volume
	int totalThreadsX = threads_per_group_x * numThreadGroupsX;
	int totalThreadsY = threads_per_group_y * numThreadGroupsY;
	int totalThreadsZ = threads_per_group_z * numThreadGroupsZ;

	
	int centerID = findID(dispatchID.x, dispatchID.y, dispatchID.z);
	int northID = findID(dispatchID.x, dispatchID.y + 1, dispatchID.z);
	int southID = findID(dispatchID.x, dispatchID.y - 1, dispatchID.z);
	int eastID = findID(dispatchID.x + 1, dispatchID.y, dispatchID.z);
	int westID = findID(dispatchID.x - 1, dispatchID.y, dispatchID.z);
	int frontID = findID(dispatchID.x, dispatchID.y, dispatchID.z + 1);
	int backID = findID(dispatchID.x, dispatchID.y, dispatchID.z - 1);
	/*
	realtimeFlowMapBuffer[centerID] = 
		(realtimeFlowMapBufferPrev[centerID] + 
			(realtimeFlowMapBufferPrev[northID] +
			realtimeFlowMapBufferPrev[southID] +
			realtimeFlowMapBufferPrev[eastID] +
			realtimeFlowMapBufferPrev[westID] +
			realtimeFlowMapBufferPrev[frontID] +
			realtimeFlowMapBufferPrev[backID]) / 6.0f);
			*/

	realtimeFlowMapBuffer[centerID] *= 0.9f;
}