#pragma kernel ProjectVelocities

#define threads_per_group_x 8
#define threads_per_group_y 8
#define threads_per_group_z 8

#define findID(mapX, mapY, mapZ) ((mapX) + ((mapY) * totalThreadsY) + ((mapZ) * totalThreadsX * totalThreadsY))

float timeStep;

RWStructuredBuffer<float> pressureBuffer;	// pressure array
RWStructuredBuffer<float3> flowBuffer;		// velocity array

int numThreadGroupsX;	// total number of thread groups
int numThreadGroupsY;	// total number of thread groups
int numThreadGroupsZ;	// total number of thread groups

[numthreads(threads_per_group_x, threads_per_group_y, threads_per_group_z)]
void ProjectVelocities(uint3 dispatchID : SV_DispatchThreadID)
{
	// calculate total threads in the each dimension of whole box volume
	int totalThreadsX = threads_per_group_x * numThreadGroupsX;
	int totalThreadsY = threads_per_group_y * numThreadGroupsY;
	int totalThreadsZ = threads_per_group_z * numThreadGroupsZ;

	float front = pressureBuffer[findID(dispatchID.x, dispatchID.y, dispatchID.z + 1)];
	float back = pressureBuffer[findID(dispatchID.x, dispatchID.y, dispatchID.z - 1)];
	float north = pressureBuffer[findID(dispatchID.x, dispatchID.y + 1, dispatchID.z)];
	float south = pressureBuffer[findID(dispatchID.x, dispatchID.y - 1, dispatchID.z)];
	float east = pressureBuffer[findID(dispatchID.x + 1, dispatchID.y, dispatchID.z)];
	float west = pressureBuffer[findID(dispatchID.x - 1, dispatchID.y, dispatchID.z)];

	float3 pressureGradient = 0.5 * float3(east - west, north - south, front - back);

	float3 velocityOld = flowBuffer[findID(dispatchID.x, dispatchID.y, dispatchID.z)];
	float3 velocityNew = velocityOld - pressureGradient;

	flowBuffer[findID(dispatchID.x, dispatchID.y, dispatchID.z)] = velocityNew;
}
