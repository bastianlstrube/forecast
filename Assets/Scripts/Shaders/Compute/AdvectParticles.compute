#pragma kernel AdvectParticles

#define threads_per_group_x 8
#define threads_per_group_y 8
#define threads_per_group_z 8

#define findID(mapX, mapY, mapZ, maxX, maxY) ((mapX) + ((mapY) * maxY) + ((mapZ) * maxX * maxY))

float timeStep;

// struct representing the data of a single particle
struct particle
{
	float3 position;
	float3 velocity;
	float4 color;
	float timeElapsed;
	float lifeSpan;
	float3 spawnPosition;
};

StructuredBuffer<float3> flowBuffer;			// array of vectors
RWStructuredBuffer<particle> particleBuffer;	// array of particles

int numThreadGroupsX;	// total number of thread groups
int numThreadGroupsY;	// total number of thread groups
int numThreadGroupsZ;	// total number of thread groups

SamplerState _LinearClamp;
SamplerState _LinearRepeat;
SamplerState _PointClamp;
SamplerState _PointRepeat;

float drag;

int velocityAlpha;

[numthreads(512, 1, 1)]
void AdvectParticles(uint3 dispatchID : SV_DispatchThreadID)
{
	// calculate total threads in the each dimension of whole box volume
	int totalThreadsX = threads_per_group_x * numThreadGroupsX;
	int totalThreadsY = threads_per_group_y * numThreadGroupsY;
	int totalThreadsZ = threads_per_group_z * numThreadGroupsZ;

	int totalThreads = totalThreadsX * totalThreadsY * totalThreadsZ;

	int particleID = dispatchID.x;
	//(dispatchID.x) + ((dispatchID.y) * totalThreadsX) + ((dispatchID.z) * totalThreadsX * totalThreadsY);
	
	if (particleBuffer[particleID].timeElapsed > particleBuffer[particleID].lifeSpan) {
		particleBuffer[particleID].timeElapsed = 0;
		particleBuffer[particleID].position = particleBuffer[particleID].spawnPosition;
		particleBuffer[particleID].velocity = float3(0, 0, 0);
	}

	int bottomX = floor(particleBuffer[particleID].position.x);
	int bottomY = floor(particleBuffer[particleID].position.y);
	int bottomZ = floor(particleBuffer[particleID].position.z);
	int topX = ceil(particleBuffer[particleID].position.x);
	int topY = ceil(particleBuffer[particleID].position.y);
	int topZ = ceil(particleBuffer[particleID].position.z);

	float x = particleBuffer[particleID].position.x - (float)bottomX;
	float y = particleBuffer[particleID].position.y - (float)bottomY;
	float z = particleBuffer[particleID].position.z - (float)bottomZ;

	float3 value = flowBuffer[findID(bottomX, bottomY, bottomZ, totalThreadsX, totalThreadsY)] * (1 - x) * (1 - y) * (1 - z) +
		flowBuffer[findID(topX, bottomY, bottomZ, totalThreadsX, totalThreadsY)] * x * (1 - y) * (1 - z) +
		flowBuffer[findID(bottomX, topY, bottomZ, totalThreadsX, totalThreadsY)] * (1 - x) * y * (1 - z) +
		flowBuffer[findID(bottomX, bottomY, topZ, totalThreadsX, totalThreadsY)] * (1 - x) * (1 - y) * z +
		flowBuffer[findID(topX, bottomY, topZ, totalThreadsX, totalThreadsY)] * x * (1 - y) * z +
		flowBuffer[findID(bottomX, topY, topZ, totalThreadsX, totalThreadsY)] * (1 - x) * y * z +
		flowBuffer[findID(topX, topY, bottomZ, totalThreadsX, totalThreadsY)] * x * y * (1 - z) +
		flowBuffer[findID(topX, topY, topZ, totalThreadsX, totalThreadsY)] * x * y * z;

	particleBuffer[particleID].velocity += value;
	particleBuffer[particleID].velocity *= drag;

	particleBuffer[particleID].timeElapsed += timeStep;

	float percentOfLifespan = saturate(particleBuffer[particleID].timeElapsed / particleBuffer[particleID].lifeSpan);

	float3 velocity = particleBuffer[particleID].velocity;
	float squareVelocity = abs(velocity.x * velocity.x + velocity.y * velocity.y + velocity.z + velocity.z);
	float maxSquareVelocity = 2;

	float alphaScale = saturate(velocityAlpha + squareVelocity / maxSquareVelocity);

	particleBuffer[particleID].color = float4(1.0, 1.0, 1.0, (1-percentOfLifespan)*alphaScale);

	particleBuffer[particleID].position += particleBuffer[particleID].velocity;
}