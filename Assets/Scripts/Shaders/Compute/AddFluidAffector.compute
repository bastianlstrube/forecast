#pragma kernel AddFluidAffector

#define threads_per_group_x 8
#define threads_per_group_y 8
#define threads_per_group_z 8

#define findID(mapX, mapY, mapZ) (mapX + totalThreadsX * (mapY + totalThreadsY * mapZ))

float timeStep;

RWStructuredBuffer<float3> flowBuffer;	// array of vectors

int numThreadGroupsX;	// total number of thread groups
int numThreadGroupsY;	// total number of thread groups
int numThreadGroupsZ;	// total number of thread groups

float size;
float3 sourcePosition;
float3 sourceVelocity;

float3 constantForces;

float3 worldPos;
float3 worldScale;

[numthreads(threads_per_group_x, threads_per_group_y, threads_per_group_z)]
void AddFluidAffector(uint3 dispatchID : SV_DispatchThreadID)
{
	// calculate total threads in the each dimension of whole box volume
	int totalThreadsX = threads_per_group_x * numThreadGroupsX;
	int totalThreadsY = threads_per_group_y * numThreadGroupsY;
	int totalThreadsZ = threads_per_group_z * numThreadGroupsZ;

	int totalThreads = totalThreadsX * totalThreadsY * totalThreadsZ;

	int cellID = findID(dispatchID.x, dispatchID.y, dispatchID.z);

	float3 differenceVector = worldPos + float3(dispatchID.x, dispatchID.y, dispatchID.z) * worldScale - sourcePosition;
	float distance = differenceVector.x*differenceVector.x + differenceVector.y*differenceVector.y + differenceVector.z*differenceVector.z;
	distance = clamp(distance, 0, size);

	flowBuffer[cellID] += sourceVelocity * (distance-size) + constantForces;
}