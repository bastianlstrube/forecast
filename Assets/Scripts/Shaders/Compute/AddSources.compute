#pragma kernel AddFluidSources

#define threads_per_group_x 8
#define threads_per_group_y 8
#define threads_per_group_z 8

#define findID(mapX, mapY, mapZ) (mapX + totalThreadsX * (mapY + totalThreadsY * mapZ))

struct source
{
	float3 position;
	float3 velocity;
};

float timeStep;

RWStructuredBuffer<float3> flowBuffer;	// array of vectors
RWStructuredBuffer<source> fluidSourcesBuffer;

int numThreadGroupsX;	// total number of thread groups
int numThreadGroupsY;	// total number of thread groups
int numThreadGroupsZ;	// total number of thread groups

[numthreads(threads_per_group_x, threads_per_group_y, threads_per_group_z)]
void AddFluidSources(uint3 dispatchID : SV_DispatchThreadID)
{
	
	// calculate total threads in the each dimension of whole box volume
	int totalThreadsX = threads_per_group_x * numThreadGroupsX;
	int totalThreadsY = threads_per_group_y * numThreadGroupsY;
	int totalThreadsZ = threads_per_group_z * numThreadGroupsZ;

	int totalThreads = totalThreadsX * totalThreadsY * totalThreadsZ;

	int cellID = findID(dispatchID.x, dispatchID.y, dispatchID.z);

	int fluidSourceX = floor(dispatchID.x / 128.0f * 30);
	int fluidSourceY = floor(dispatchID.y / 64.0f * 20);
	int fluidID = fluidSourceX * 20 + (fluidSourceY);
	
	/*
	float3 normalisedDispatch = float3(dispatchID.x/64.0f, dispatchID.y/64.0f, dispatchID.z/ 64.0f);
	float3 normalisedFluid = float3(fluidSourcesBuffer[fluidID].position.x / 640.0f, fluidSourcesBuffer[fluidID].position.y / 480.0f, fluidSourcesBuffer[fluidID].position.z / 256.0f);
	float3 proximity = normalisedDispatch - normalisedFluid;

	if(proximity.z * proximity.z < 0.2f)
		flowBuffer[cellID] += fluidSourcesBuffer[fluidID].velocity;
	*/

	float zProximity = saturate(1.0 - (abs((dispatchID.z / 64.0f) - (fluidSourcesBuffer[fluidID].position.z / 256.0f))) - 0.7f);

	flowBuffer[cellID] += (fluidSourcesBuffer[fluidID].velocity/10.0f);

}